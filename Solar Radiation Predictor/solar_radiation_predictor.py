# -*- coding: utf-8 -*-
"""Solar Radiation predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgEJKNmq6Z5e9PdYacFwZ__9NolJN8IK
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('SolarPrediction.csv')
df.head()

df.shape

df.info()

df.describe()

sns.pairplot(df)

# we will check whether there is any missing values present in the data
sns.heatmap(df.isna(), yticklabels= False, cbar= False, cmap= 'viridis')

"""We see that there are no missing values present in the data"""

df[:5]

sns.scatterplot(x='Temperature', y='Radiation', data=df)

"""We see that when temperature is around 50 to 60 F, radiation is high"""

plt.figure(figsize=(10,6))
sns.set_palette('viridis')
sns.scatterplot(x='Pressure', y='Radiation', data=df)
# When Pressure is around 30.40 to 30.50 Radiation tends to be high

plt.figure(figsize=(10,6))
sns.set_palette('viridis')
sns.scatterplot(x='Humidity', y='Radiation', data=df)
# we see that humidity is constant from 20 to 80 and then we have some high radiation when Humidity is above 80

sns.scatterplot(x='WindDirection(Degrees)', y='Radiation', data=df)

sns.heatmap(df.corr(), annot= True, cmap= 'coolwarm')

"""Humidity and Wind direction are negatively correalted to Radiation"""

df.columns

X = df[['Temperature', 'Pressure', 'Speed']]
X[:5]

y =df['Radiation']
y[:5]

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

scaler.fit(X)

scaled = scaler.transform(X)

scaled_df = pd.DataFrame(scaled, columns= X.columns)

scaled_df[:5]

X = scaled_df
X[:5]

from sklearn.linear_model import LinearRegression
model = LinearRegression()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3, random_state=42)

model.fit(X_train, y_train)

pred = model.predict(X_test)

from sklearn import metrics
metrics.r2_score(y_test, pred)

from sklearn.linear_model import SGDRegressor
mod = SGDRegressor()

mod.fit(X_train, y_train)

predict = mod.predict(X_test)

metrics.r2_score(y_test, predict)